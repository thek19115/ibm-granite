# -*- coding: utf-8 -*-
"""healthy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123nouuDkSYs0k4y_Yz6Uz-kzENnsxUVZ
"""

!pip install transformers torch gradio PYPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure pad token is set
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Generate text using model
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# Extract text from PDF
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in reader.pages:
            extracted = page.extract_text()
            if extracted:
                text += extracted + "\n"
        return text.strip()
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# Eco Tips Generator
def eco_tips_generator(problem_keywords):
    if not problem_keywords.strip():
        return "‚ö†Ô∏è Please enter some keywords or a description of the environmental issue."
    prompt = (
        f"Generate practical and actionable eco-friendly tips for sustainable living "
        f"related to: {problem_keywords}. Provide specific solutions and suggestions:"
    )
    return generate_response(prompt, max_length=1000)

# Policy Summarization
def policy_summarization(pdf_file, policy_text):
    if not pdf_file and not policy_text.strip():
        return "‚ö†Ô∏è Please upload a policy PDF or paste some text."

    content = extract_text_from_pdf(pdf_file) if pdf_file else policy_text
    prompt = (
        "Summarize the following policy document and extract the most important points, "
        "key provisions, and implications:\n\n" + content
    )
    return generate_response(prompt, max_length=1200)

# Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("# üå± Eco Assistant & üìú Policy Analyzer")

    with gr.Tabs():
        # Eco Tips Generator Tab
        with gr.TabItem("‚ôªÔ∏è Eco Tips Generator"):
            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Textbox(
                        label="Environmental Problem / Keywords",
                        placeholder="e.g., plastic waste, solar energy, water conservation...",
                        lines=3
                    )
                    generate_tips_btn = gr.Button("Generate Eco Tips")

                with gr.Column():
                    tips_output = gr.Textbox(
                        label="Sustainable Living Tips",
                        lines=15,
                        show_copy_button=True
                    )

            generate_tips_btn.click(
                fn=eco_tips_generator,
                inputs=keywords_input,
                outputs=tips_output
            )

        # Policy Summarization Tab
        with gr.TabItem("üìò Policy Summarization"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(
                        label="Upload Policy PDF",
                        file_types=[".pdf"]
                    )
                    policy_text_input = gr.Textbox(
                        label="Or paste policy text here",
                        placeholder="Paste full or partial policy text...",
                        lines=5
                    )
                    summarize_btn = gr.Button("Summarize Policy")

                with gr.Column():
                    summary_output = gr.Textbox(
                        label="Policy Summary & Key Points",
                        lines=20,
                        show_copy_button=True
                    )

            summarize_btn.click(
                fn=policy_summarization,
                inputs=[pdf_upload, policy_text_input],
                outputs=summary_output
            )

# Launch app
app.launch(share=True)